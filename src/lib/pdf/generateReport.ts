import PDFDocument from 'pdfkit'
import fs from 'fs'
import path from 'path'

export interface ReportData {
  title: string
  period: string
  summary: string
  aiComment?: string
  kpis: {
    totalSpend: number
    totalRevenue: number
    totalClicks: number
    totalConversions: number
    totalImpressions: number
    avgCTR: number
    avgCPC: number
    avgROAS: number
    avgCPA: number
  }
  topCampaigns: Array<{
    name: string
    platform: string
    spend: number
    revenue: number
    roas: number
  }>
  alerts: Array<{
    message: string
    type: string
    severity: string
  }>
}

export async function generatePDFReport(data: ReportData): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 })
      const fileName = `report-${Date.now()}.pdf`
      const filePath = path.join(process.cwd(), 'public', 'reports', fileName)
      
      // Ensure reports directory exists
      const reportsDir = path.join(process.cwd(), 'public', 'reports')
      if (!fs.existsSync(reportsDir)) {
        fs.mkdirSync(reportsDir, { recursive: true })
      }

      const stream = fs.createWriteStream(filePath)
      doc.pipe(stream)

      // Header
      doc.fontSize(24)
        .text('eMarketer.pro', 50, 50)
        .fontSize(16)
        .text(data.title, 50, 90)
        .fontSize(12)
        .text(`Period: ${data.period}`, 50, 120)
        .text(`Generated: ${new Date().toLocaleDateString()}`, 50, 140)

      // Executive Summary
      doc.fontSize(16)
        .text('Executive Summary', 50, 180)
        .fontSize(12)
        .text(data.summary, 50, 210, { width: 500 })

      // KPIs Section
      let yPosition = 280
      doc.fontSize(16)
        .text('Key Performance Indicators', 50, yPosition)
        yPosition += 30

      doc.fontSize(12)
      const kpiData = [
        ['Total Spend', `$${data.kpis.totalSpend.toLocaleString()}`],
        ['Total Revenue', `$${data.kpis.totalRevenue.toLocaleString()}`],
        ['Total Clicks', data.kpis.totalClicks.toLocaleString()],
        ['Total Conversions', data.kpis.totalConversions.toLocaleString()],
        ['Average CTR', `${data.kpis.avgCTR.toFixed(2)}%`],
        ['Average CPC', `$${data.kpis.avgCPC.toFixed(2)}`],
        ['Average ROAS', `${data.kpis.avgROAS.toFixed(2)}x`],
      ]

      kpiData.forEach(([label, value]) => {
        doc.text(`${label}:`, 70, yPosition)
          .text(value, 200, yPosition)
        yPosition += 20
      })

      // Top Campaigns
      yPosition += 20
      doc.fontSize(16)
        .text('Top Performing Campaigns', 50, yPosition)
        yPosition += 30

      doc.fontSize(12)
      data.topCampaigns.forEach((campaign, index) => {
        doc.text(`${index + 1}. ${campaign.name} (${campaign.platform})`, 70, yPosition)
        yPosition += 15
        doc.text(`   Spend: $${campaign.spend.toLocaleString()} | Revenue: $${campaign.revenue.toLocaleString()} | ROAS: ${campaign.roas.toFixed(2)}x`, 70, yPosition)
        yPosition += 25
      })

      // AI Insights
      if (data.aiComment) {
        yPosition += 10
        doc.fontSize(16)
          .text('AI Insights', 50, yPosition)
          .fontSize(12)
          .text(data.aiComment, 50, yPosition + 30, { width: 500 })
        yPosition += 100
      }

      // Alerts
      if (data.alerts.length > 0) {
        doc.fontSize(16)
          .text('Alerts & Notifications', 50, yPosition)
          yPosition += 30

        doc.fontSize(12)
        data.alerts.forEach((alert) => {
          doc.text(`â€¢ ${alert.message}`, 70, yPosition)
          yPosition += 20
        })
      }

      // Footer
      doc.fontSize(10)
        .text('Generated by eMarketer.pro', 50, doc.page.height - 50)

      doc.end()

      stream.on('finish', () => {
        resolve(`/reports/${fileName}`)
      })

      stream.on('error', (error) => {
        reject(error)
      })

    } catch (error) {
      reject(error)
    }
  })
}
