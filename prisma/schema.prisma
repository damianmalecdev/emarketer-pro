// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION MODELS (NextAuth.js)
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// CORE MODELS
// ============================================

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String?       // bcrypt hashed
  plan          String        @default("free")  // 'free' | 'pro' | 'enterprise'
  role          String        @default("user")  // 'admin' | 'manager' | 'viewer'
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]  // Multi-tenant access
  alerts        Alert[]
  messages      ChatMessage[]
  preferences   UserPreference[]
  reports       Report[]
}

model Company {
  id           String          @id @default(uuid())
  name         String
  domain       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  members      Membership[]
  integrations Integration[]
  campaigns    Campaign[]
  events       Event[]
  reports      Report[]
  metaAccounts MetaAdsAccount[]
  
}

model Membership {
  id         String   @id @default(uuid())
  userId     String
  companyId  String
  role       String   @default("owner")  // 'owner' | 'manager' | 'analyst'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

// ============================================
// INTEGRATION & CAMPAIGN MODELS
// ============================================

model Integration {
  id              String     @id @default(uuid())
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  platform        String     // 'google-ads' | 'meta' | 'tiktok' | 'ga4'
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?
  accountId       String?
  accountName     String?
  currency        String?    @default("USD")
  isActive        Boolean    @default(true)
  
  // Google Ads specific
  loginCustomerId String?
  customerIds     Json?      // Array of accessible customer IDs
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  campaigns       Campaign[]

  @@unique([companyId, platform, accountId])
}

model Campaign {
  id                 String            @id @default(uuid())
  company            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          String
  integration        Integration?      @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  integrationId      String?
  name               String
  platform           String
  platformCampaignId String  // ID from platform API
  status             String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  events             Event[]
  metrics            CampaignMetric[]  // Time-series metrics
  anomalies          AnomalyDetection[]

  @@index([companyId, platform])
  @@index([platform])
  @@index([platformCampaignId])
}

// Time-series metrics table (daily snapshots)
model CampaignMetric {
  id          String   @id @default(uuid())
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  
  date        DateTime
  spend       Float    @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Float    @default(0)
  revenue     Float    @default(0)
  
  // Calculated metrics
  ctr         Float    @default(0)  // Click-through rate (%)
  cpc         Float    @default(0)  // Cost per click
  roas        Float    @default(0)  // Return on ad spend
  cpa         Float    @default(0)  // Cost per acquisition
  
  createdAt   DateTime @default(now())
  
  @@unique([campaignId, date])
  @@index([date])
  @@index([campaignId, date])
}

model Event {
  id         String    @id @default(uuid())
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId String?
  eventName  String
  eventValue Float?
  eventTime  DateTime
  source     String    @default("ga4")
  
  // GA4 specific
  sessionId       String?
  userPseudoId    String?
  eventParams     Json?
  userProperties  Json?
  
  createdAt  DateTime  @default(now())
  
  @@index([companyId, eventTime])
  @@index([eventName, eventTime])
  @@index([source, eventTime])
}

// ============================================
// AI & REPORTING MODELS
// ============================================

model Alert {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  type      String   // 'anomaly' | 'performance' | 'budget' | 'opportunity'
  severity  String   // 'low' | 'medium' | 'high' | 'critical'
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  type      String   // 'weekly' | 'monthly' | 'custom'
  period    String
  summary   String
  aiComment String?
  fileUrl   String?
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      String   // 'user' | 'assistant' | 'system'
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
}

model UserPreference {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  platform          String   // 'google-ads' | 'meta' | 'ga4' | 'tiktok'
  selectedAccountId String?
  currency          String?  // ISO currency override
  updatedAt         DateTime @updatedAt

  @@unique([userId, platform])
}

model AnomalyDetection {
  id            String     @id @default(uuid())
  campaign      Campaign?  @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId    String?
  metricType    String     // 'spend' | 'roas' | 'ctr' | 'conversions'
  previousValue Float
  currentValue  Float
  deviation     Float      // Percentage deviation
  threshold     Float
  direction     String     // 'increase' | 'decrease'
  detectedAt    DateTime   @default(now())
  isCritical    Boolean    @default(false)
  resolved      Boolean    @default(false)
}

// ============================================
// GOOGLE ADS MODELS
// ============================================

model GoogleAdsCustomer {
  id                String   @id @default(cuid())
  customerId        String   @unique
  descriptiveName   String?
  currencyCode      String?
  timeZone          String?
  manager           Boolean  @default(false)
  testAccount       Boolean  @default(false)
  payPerConversion  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  campaigns         GoogleAdsCampaign[]

  @@index([customerId])
}

model GoogleAdsCampaign {
  id                String   @id @default(cuid())
  customerId        String
  campaignId        String   @unique
  name              String
  status            String
  type              String
  advertisingChannelType String
  advertisingChannelSubType String?
  budget            Decimal?
  budgetType        String?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  customer          GoogleAdsCustomer     @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  adGroups          GoogleAdsAdGroup[]

  @@unique([customerId, campaignId])
  @@index([customerId])
}

model GoogleAdsAdGroup {
  id                String   @id @default(cuid())
  campaignId        String
  adGroupId         String   @unique
  name              String
  status            String
  type              String
  cpcBidMicros      Decimal?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  campaign          GoogleAdsCampaign     @relation(fields: [campaignId], references: [campaignId], onDelete: Cascade)

  @@unique([campaignId, adGroupId])
  @@index([campaignId])
}

model GoogleAdsAd {
  id                String   @id @default(cuid())
  adGroupId         String
  adId              String   @unique
  type              String
  status            String
  finalUrls         String[]
  headlines         String[]
  descriptions      String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([adGroupId, adId])
  @@index([adGroupId])
}

model GoogleAdsKeyword {
  id                String   @id @default(cuid())
  adGroupId         String
  keywordId         String   @unique
  text              String
  matchType         String
  status            String
  cpcBidMicros      Decimal?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([adGroupId, keywordId])
  @@index([adGroupId])
}

model GoogleAdsMetrics {
  id                String   @id @default(cuid())
  entityType        String
  entityId          String
  date              DateTime
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  costMicros        Decimal  @default(0)
  conversions       Decimal  @default(0)
  conversionValue   Decimal  @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([entityType, entityId, date])
  @@index([entityType, entityId])
  @@index([date])
}

model GoogleAdsSyncLog {
  id                String   @id @default(cuid())
  customerId        String
  syncType          String
  entityType        String?
  status            String
  startedAt         DateTime
  completedAt       DateTime?
  duration          Int?
  recordsProcessed  Int?
  recordsCreated    Int?
  recordsUpdated    Int?
  error             String?
  errorDetails      Json?
  triggeredBy       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([customerId])
  @@index([status])
  @@index([startedAt])
}

model GoogleAdsMetricsHourly {
  id                String   @id @default(cuid())
  entityType        String
  customerId        String
  campaignId        String?
  adGroupId         String?
  adId              String?
  keywordId         String?
  timestamp         DateTime
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  cost              Decimal  @default(0)
  conversions       Decimal  @default(0)
  conversionValue   Decimal  @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([entityType, customerId, timestamp])
  @@index([entityType, customerId])
  @@index([timestamp])
}

model GoogleAdsMetricsMonthly {
  id                String   @id @default(cuid())
  entityType        String
  customerId        String
  campaignId        String?
  adGroupId         String?
  adId              String?
  keywordId         String?
  year              Int
  month             Int
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  cost              Decimal  @default(0)
  conversions       Decimal  @default(0)
  conversionValue   Decimal  @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([entityType, customerId, year, month])
  @@index([entityType, customerId])
  @@index([year, month])
}

// ============================================
// META ADS MODELS
// ============================================

model MetaAdsAccount {
  id                    String   @id @default(cuid())
  companyId             String
  accountId             String
  name                  String
  accountStatus         Int
  currency              String
  timezone              String
  accountType           String
  businessManagerIdRef  String?
  accessToken           String?
  tokenExpiresAt        DateTime?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, accountId])
  @@index([companyId])
}

